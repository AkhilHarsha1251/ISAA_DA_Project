import osimport tkinter as tkfrom tkinter import filedialog, simpledialogfrom cryptography.hazmat.primitives.ciphers import algorithms, modes, Cipherfrom cryptography.hazmat.primitives import paddingfrom cryptography.hazmat.primitives import hashesfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMACfrom cryptography.hazmat.backends import default_backendMAX_TRIES = 5# Function to derive a key from the password and saltdef derive_key(password, salt):    kdf = PBKDF2HMAC(        algorithm=hashes.SHA256(),        length=32,        salt=salt,        iterations=100000,        backend=default_backend()    )    return kdf.derive(password.encode('utf-8'))def encrypt_file():    input_file = filedialog.askopenfilename()    output_file = filedialog.asksaveasfilename()    password = simpledialog.askstring("Password", "Enter Password for Encryption:", show='*')    salt = os.urandom(16) # Generate a random salt    key = derive_key(password, salt) # Derive a key from the password and salt    iv = os.urandom(16) # Generate a 128-bit IV    cipher = Cipher(algorithms.Camellia(key), modes.CFB(iv), backend=default_backend())    encryptor = cipher.encryptor()    # Pad the input data to a multiple of the block size    padder = padding.PKCS7(algorithms.Camellia.block_size).padder()    with open(input_file, 'rb') as f:        plaintext = f.read()    padded_plaintext = padder.update(plaintext) + padder.finalize()    # Encrypt the padded data    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()    # Write the encrypted data to the output file    with open(output_file, 'wb') as f:        f.write(ciphertext)    # Save the salt and IV to files    salt_file = os.path.splitext(output_file)[0] + '.salt'    iv_file = os.path.splitext(output_file)[0] + '.iv'    with open(salt_file, 'wb') as f:        f.write(salt)    with open(iv_file, 'wb') as f:        f.write(iv)    show_success_message("Encryption Successful")def decrypt_file():    input_file = filedialog.askopenfilename()    output_file = filedialog.asksaveasfilename()    try_count = 0    while try_count < MAX_TRIES:       try:             password = simpledialog.askstring("Password", "Enter Password for Decryption:", show='*')            salt_file = os.path.splitext(input_file)[0] + '.salt'            iv_file = os.path.splitext(input_file)[0] + '.iv'            # Load the salt and IV from files            with open(salt_file, 'rb') as f:                salt = f.read()            with open(iv_file, 'rb') as f:                iv = f.read()            key = derive_key(password, salt) # Derive the key from the password and salt            cipher = Cipher(algorithms.Camellia(key), modes.CFB(iv), backend=default_backend())            decryptor = cipher.decryptor()            # Read the encrypted data from the input file            with open(input_file, 'rb') as f:             ciphertext = f.read()            # Decrypt the encrypted data            padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()            # Unpad the decrypted data            unpadder = padding.PKCS7(algorithms.Camellia.block_size).unpadder()            plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()            # Write the decrypted data to the output file            with open(output_file, 'wb') as f:                f.write(plaintext)            # Show success message            show_success_message("Decryption Successful")            return       except ValueError:            # Exception raised when the password is incorrect            try_count += 1            if try_count >= MAX_TRIES:                show_error_message("Max attempts exceeded. Exiting.")                root.quit()            else:                show_error_message("Wrong Password. Try again.")def show_success_message(message):    success_popup = tk.Toplevel()    success_popup.title("Success")    success_popup.geometry("250x100")    success_popup.configure(bg='#4CAF50')    success_label = tk.Label(success_popup, text=message, fg="white", bg='#4CAF50', font=("Helvetica", 12))    success_label.pack(padx=10, pady=20)    success_popup.after(2000, success_popup.destroy)    success_popup.mainloop()def show_error_message(message):    error_popup = tk.Toplevel()    error_popup.title("Error")    error_popup.geometry("250x100")    error_popup.configure(bg='#f44336')    error_label = tk.Label(error_popup, text=message, fg="white", bg='#f44336', font=("Helvetica", 12))    error_label.pack(padx=10, pady=20)    error_popup.after(3000, error_popup.destroy)    returnroot = tk.Tk()root.title("File Encryptor/Decryptor (ISAA Project)")root.geometry('400x200')root.configure(bg='#2c3e50')encrypt_button = tk.Button(root, text="Encrypt File", command=encrypt_file, bg='#4CAF50', fg='white', width=20)encrypt_button.pack(side=tk.LEFT, padx=5, pady=5)decrypt_button = tk.Button(root, text="Decrypt File", command=decrypt_file, bg='#008CBA', fg='white', width=20)decrypt_button.pack(side=tk.LEFT, padx=5, pady=5)exit_button = tk.Button(root, text="Exit", command=root.quit, bg='#f44336', fg='white', width=5)exit_button.pack(side=tk.LEFT, padx=5, pady=5)root.mainloop()